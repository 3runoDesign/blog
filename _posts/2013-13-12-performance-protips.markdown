---
published: false
author: Flavia Fortes
layout: post
title: "Performance Protips"
date: 2013-12-13 10:00
comments: true
categories:
  - heroku
  - protips
  - postgres
  - performance
  - english
---



This is my first post in english. A few weeks ago we received Ali to work with us as you can see [here](http://helabs.com.br/blog/2013/11/13/novos-membros-analu-e-ali/). Ali is from Azerbaijan and we only communicate in english. Now that we have him, we are trying our best to talk and write in english most of the time. And it's being an awesome experience. <3

So, inspired by this situation I resolve that I would write the first english post on HE:labs blog. Let's see how it goes.


<!--more-->


Hi, guys!

This is my first post in english. A few weeks ago we received Ali to work with us as you can see [here](http://helabs.com.br/blog/2013/11/13/novos-membros-analu-e-ali/). Ali is from Azerbaijan and we only communicate in english. Now that we have him, we are trying our best to talk and write in english most of the time. And it's being an awesome experience. <3

So, inspired by this situation I resolve that I would write the first english post on HE:labs blog. Let's see how it goes.

I implemented on one of our projects here at HE:labs a serie of complex calculations. When I put those changes in production environment, our client had lots of access on his website what generated an application error in Heroku. The complex calculations being generated by several users at the same time caused an server timeout.

As a programmer who still learning how to code and how to deal with this kind of performance issues, I immediatly saw an opportunity to grow. I asked help for more experienced programmers and now I'm gonna relate to you what I learned.

First of all, I discover this amazing tool called [Rollbar](https://rollbar.com/) that catches errors and gives enough information about then so you can discover what's going on and fix the problem. They email you whenever an exception occurs. This way, you discover an error and fix it before your client calls you to warn you that some of his users complained. You antecipate that. Nice, uh?
After this lesson, I put Rollbar in all of my projects. And I truly can't see myself working in any project that doesn't have this kind of analyzes 24-hour. Here at HE:labs we also use [Airbrake](https://airbrake.io/) and we recommend it.

To put the rollbar add-on on your Heroku app:

{% highlight ruby linenos %}
  $ heroku addons:add rollbar --app yourapp
{% endhighlight %}

I also started to use [New Relic](http://newrelic.com/) to monitorize the app performance. It's another amazing tool that we recommend. If you don't know New Relic yet it's a monitoring service, for example, In my case I was able to see wich exactly were the queries that were tooking so long to return an answer. They have this awesome graphics that shows you wich action or view needs some refactoring.

To put the rollbar add-on on your Heroku app:

{% highlight ruby linenos %}
  $ heroku addons:add newrelic --app yourapp
{% endhighlight %}

The first thing I thought when the performance issue happened was that I would have to simulate the timeout on the staging environment. But to acomplish that I would have to clone the production database. I was using postgres on Heroku. That is what I have done and I will show this Heroku protip for you guys.

You are going to need the pg:backup add-on on both of your apps:

{% highlight ruby linenos %}
  $ heroku addons:add pgbackups
{% endhighlight %}

This next command line will create a database backup of your production app

{% highlight ruby linenos %}
  $ heroku pgbackups:capture --expire --app production-app
{% endhighlight %}

After this, you will use the pg:backups:restore on you staging app:

{% highlight ruby linenos %}
  $ heroku pgbackups:restore HEROKU_POSTGRESQL_TURQUOISE -a staging-app \
    `heroku pgbackups:url -a production-app`
{% endhighlight %}

Be aware of wich color is the postgres database of your staging app, in this example was TURQUOISE.

In this particular case I also cloned the database to my local environment, like this:

After capturing the database shot, I downloaded:

{% highlight ruby linenos %}
  $ curl -o latest.dump `heroku pgbackups:url`
{% endhighlight %}

And restored locally:

{% highlight ruby linenos %}
  $ pg_restore --verbose --clean --no-acl --no-owner -h localhost -U youruser -d yourdb latest.dump
{% endhighlight %}


So, how did you guys like the post in english? Would you like us to write some more?
I hope this can help you in some manner and I expect to improve my english and come back writing soon enough.

Hugs!
